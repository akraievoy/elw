{
  "shared" : false,
  "versions" : [ {
    "solution" : [ "addi $v0, $v0, 1", "beq $a0, $a1, end", "addi $v0, $v0, -1", "end:" ],
    "tests" : [ {
      "shared" : true,
      "args" : {
        "regs" : [ "$a0:19:19", "$a1:19:19", "$v0::1" ]
      },
      "name" : null,
      "id" : null
    }, {
      "shared" : true,
      "args" : {
        "regs" : [ "$a0:25:25", "$a1:2:2", "$v0::0" ]
      },
      "name" : null,
      "id" : null
    }, {
      "shared" : true,
      "args" : {
        "regs" : [ "$a0:14:14", "$a1:-14:-14", "$v0::0" ]
      },
      "name" : null,
      "id" : null
    } ],
    "statementHtml" : [ "Присвоить $v0 значение 1, если регистры $a0 и $a1 равны, иначе присвоить $v0 значение 0" ],
    "name" : "Присвоение с условием",
    "id" : "1"
  }, {
    "solution" : [ "sll $v0, $a0, 3", "ori $v0, $v0, 12" ],
    "tests" : [ {
      "shared" : true,
      "args" : {
        "regs" : [ "$a0:12:12", "$v0::108" ]
      },
      "name" : null,
      "id" : null
    }, {
      "shared" : true,
      "args" : {
        "regs" : [ "$a0:6:6", "$v0::60" ]
      },
      "name" : null,
      "id" : null
    }, {
      "shared" : true,
      "args" : {
        "regs" : [ "$a0:0:0", "$v0::12" ]
      },
      "name" : null,
      "id" : null
    } ],
    "statementHtml" : [ "Выполнить побитовый сдвиг значения регистра $a0 влево на 3 разряда и установить 3-й и 4-й биты в 1, результат записать в $v0" ],
    "name" : "Побитовый сдвиг влево",
    "id" : "2"
  }, {
    "solution" : [ "srl $v0, $a0, 3", "ori $v0, $v0, 3" ],
    "tests" : [ {
      "shared" : true,
      "args" : {
        "regs" : [ "$a0:32:32", "$v0::7" ]
      },
      "name" : null,
      "id" : null
    }, {
      "shared" : true,
      "args" : {
        "regs" : [ "$a0:16:16", "$v0::3" ]
      },
      "name" : null,
      "id" : null
    }, {
      "shared" : true,
      "args" : {
        "regs" : [ "$a0:65:65", "$v0::11" ]
      },
      "name" : null,
      "id" : null
    } ],
    "statementHtml" : [ "Выполнить побитовый сдвиг значения регистра $a0 вправо на 3 разряда и установить 1-й и 2-й биты в 1, результат записать в $v0" ],
    "name" : "Побитовый сдвиг вправо",
    "id" : "3"
  }, {
    "solution" : [ "addi $v0, $v0, 1", "lw $t0, 0($a0) ", "lw $t1, 0($a1)", "beq $t0, $t1,  end", "addi $v0, $v0, -1", "end:" ],
    "tests" : [ {
      "shared" : true,
      "args" : {
        "mem" : [ "0x100:25:25", "0x104:25:25" ],
        "regs" : [ "$a0:0x100:0x100", "$a1:0x104:0x104", "$v0::1" ]
      },
      "name" : null,
      "id" : null
    }, {
      "shared" : true,
      "args" : {
        "mem" : [ "0x100:0:0", "0x104:10:10" ],
        "regs" : [ "$a0:0x100:0x100", "$a1:0x104:0x104", "$v0::0" ]
      },
      "name" : null,
      "id" : null
    }, {
      "shared" : true,
      "args" : {
        "mem" : [ "0x100:117:117", "0x104:117:117" ],
        "regs" : [ "$a0:0x100:0x100", "$a1:0x104:0x104", "$v0::1" ]
      },
      "name" : null,
      "id" : null
    } ],
    "statementHtml" : [ "Установить $v0 в 1, если содержимое ЯП по адресам из регистров $a0 и $a1 равны, иначе установить $v0 в 0." ],
    "name" : "Проверка на равенство",
    "id" : "4"
  }, {
    "solution" : [ "lw $t0, 0($a0) ", "lw $t1, 0($a1)", "lw $t2, 0($a2)", "add $v0, $t0, $t1", "sub $v0, $v0, $t2" ],
    "tests" : [ {
      "shared" : true,
      "args" : {
        "mem" : [ "0x100:17:17", "0x104:13:13", "0x108:5:5" ],
        "regs" : [ "$a0:0x100:0x100", "$a1:0x104:0x104", "$a2:0x108:0x108", "$v0::25" ]
      },
      "name" : null,
      "id" : null
    }, {
      "shared" : true,
      "args" : {
        "mem" : [ "0x100:9:9", "0x104:-3:-3", "0x108:6:6" ],
        "regs" : [ "$a0:0x100:0x100", "$a1:0x104:0x104", "$a2:0x108:0x108", "$v0::0" ]
      },
      "name" : null,
      "id" : null
    }, {
      "shared" : true,
      "args" : {
        "mem" : [ "0x100:1:1", "0x104:-5:-5", "0x108:-14:-14" ],
        "regs" : [ "$a0:0x100:0x100", "$a1:0x104:0x104", "$a2:0x108:0x108", "$v0::10" ]
      },
      "name" : null,
      "id" : null
    } ],
    "statementHtml" : [ "Cложить содержимое 2-х ЯП по адресам из регистров $a0 и $a1, отнять от суммы содержимое ЯП по адресу из регистра $a2, результат записать в $v0" ],
    "name" : "Сумма и вычитание ЯП",
    "id" : "5"
  }, {
    "solution" : [ "addi $v0, $v0, 1", "addi $a0, $a0, 2", "bgtz $a0, end", "addi $v0, $v0, -1", "end:" ],
    "tests" : [ {
      "shared" : true,
      "args" : {
        "regs" : [ "$a0:5:7", "$v0::1" ]
      },
      "name" : null,
      "id" : null
    }, {
      "shared" : true,
      "args" : {
        "regs" : [ "$a0:-2:0", "$v0::0" ]
      },
      "name" : null,
      "id" : null
    }, {
      "shared" : true,
      "args" : {
        "regs" : [ "$a0:1:3", "$v0::1" ]
      },
      "name" : null,
      "id" : null
    } ],
    "statementHtml" : [ "Увеличить содержимое регистра $a0 на 2, в случае если результат больше 0, записать в $v0 1, иначе записать 0." ],
    "name" : "Сложение и проверка неравенства",
    "id" : "6"
  }, {
    "solution" : [ "addi $v0, $v0, 1", "addi $a0, $a0, -3", "bltz $a0, end", "addi $v0, $v0, -1", "end:" ],
    "tests" : [ {
      "shared" : true,
      "args" : {
        "regs" : [ "$a0:2:-1", "$v0::1" ]
      },
      "name" : null,
      "id" : null
    }, {
      "shared" : true,
      "args" : {
        "regs" : [ "$a0:3:0", "$v0::0" ]
      },
      "name" : null,
      "id" : null
    }, {
      "shared" : true,
      "args" : {
        "regs" : [ "$a0:-5:-8", "$v0::1" ]
      },
      "name" : null,
      "id" : null
    } ],
    "statementHtml" : [ "Уменьшить содержимое регистра $a0 на 3, в случае если результат меньше 0, записать в $v0 1, иначе записать 0." ],
    "name" : "Вычитание и проверка неравенства",
    "id" : "7"
  }, {
    "solution" : [ "add $t0, $a0, $a1", "div $t0, $a2", "mflo $v0" ],
    "tests" : [ {
      "shared" : true,
      "args" : {
        "regs" : [ "$a0:3:3", "$a1:7:7", "$a2:4:4", "$v0::2" ]
      },
      "name" : null,
      "id" : null
    }, {
      "shared" : true,
      "args" : {
        "regs" : [ "$a0:-13:-13", "$a1:25:25", "$a2:6:6", "$v0::2" ]
      },
      "name" : null,
      "id" : null
    }, {
      "shared" : true,
      "args" : {
        "regs" : [ "$a0:0:0", "$a1:17:17", "$a2:5:5", "$v0::3" ]
      },
      "name" : null,
      "id" : null
    } ],
    "statementHtml" : [ "Сложить содержимое регистров $a0 и $a1, разделить сумму на содержимое регистра $a2, целую часть записать в $v0" ],
    "name" : "Сложение и деление",
    "id" : "8"
  }, {
    "solution" : [ "sub $t0, $a0, $a1", "mult $t0, $a2", "mflo $v0" ],
    "tests" : [ {
      "shared" : true,
      "args" : {
        "regs" : [ "$a0:23:23", "$a1:7:7", "$a2:10:10", "$v0::160" ]
      },
      "name" : null,
      "id" : null
    }, {
      "shared" : true,
      "args" : {
        "regs" : [ "$a0:0:0", "$a1:-9:-9", "$a2:5:5", "$v0::45" ]
      },
      "name" : null,
      "id" : null
    }, {
      "shared" : true,
      "args" : {
        "regs" : [ "$a0:4:4", "$a1:11:11", "$a2:7:7", "$v0::-49" ]
      },
      "name" : null,
      "id" : null
    } ],
    "statementHtml" : [ "Отнять содержимое регистра $a1 от $a0, умножить разницу на содержимое регистра $a2, записать результат в $v0" ],
    "name" : "Вычитание и умножение",
    "id" : "9"
  }, {
    "solution" : [ "addi $v0, $v0, 1", "and $t0, $a0, $a1", "beq $t0, $zero, end", "addi $v0, $v0, -1", "end:" ],
    "tests" : [ {
      "shared" : true,
      "args" : {
        "regs" : [ "$a0:12:12", "$a1:48:48", "$v0::1" ]
      },
      "name" : null,
      "id" : null
    }, {
      "shared" : true,
      "args" : {
        "regs" : [ "$a0:10:10", "$a1:5:5", "$v0::1" ]
      },
      "name" : null,
      "id" : null
    }, {
      "shared" : true,
      "args" : {
        "regs" : [ "$a0:11:11", "$a1:2:2", "$v0::0" ]
      },
      "name" : null,
      "id" : null
    } ],
    "statementHtml" : [ "Выполнить \"логическое И\" регистров $a0 и $a1, в случае если результат равен 0, записать в $v0 1, иначе записать 0" ],
    "name" : "Логическое И и проверка на равенство нулю",
    "id" : "10"
  }, {
    "solution" : [ "or $t0, $a0, $a1", "andi $v0, $t0, 1" ],
    "tests" : [ {
      "shared" : true,
      "args" : {
        "regs" : [ "$a0:16:16", "$a1:2:2", "$v0::0" ]
      },
      "name" : null,
      "id" : null
    }, {
      "shared" : true,
      "args" : {
        "regs" : [ "$a0:11:11", "$a1:0:0", "$v0::1" ]
      },
      "name" : null,
      "id" : null
    }, {
      "shared" : true,
      "args" : {
        "regs" : [ "$a0:7:7", "$a1:3:3", "$v0::1" ]
      },
      "name" : null,
      "id" : null
    } ],
    "statementHtml" : [ "Выполнить \"логическое ИЛИ\" регистров $a0 и $a1 и выделить последний бит результата в регистр $v0" ],
    "name" : "Логическое ИЛИ и выделение последнего бита",
    "id" : "11"
  }, {
    "solution" : [ "addi $v0, $v0, 1", "ori  $t0, $a0, 5", "beq $t0, $a1,  end", "addi $v0, $v0, -1", "end:" ],
    "tests" : [ {
      "shared" : true,
      "args" : {
        "regs" : [ "$a0:16:16", "$a1:21:21", "$v0::1" ]
      },
      "name" : null,
      "id" : null
    }, {
      "shared" : true,
      "args" : {
        "regs" : [ "$a0:11:11", "$a1:15:15", "$v0::1" ]
      },
      "name" : null,
      "id" : null
    }, {
      "shared" : true,
      "args" : {
        "regs" : [ "$a0:0:0", "$a1:4:4", "$v0::0" ]
      },
      "name" : null,
      "id" : null
    } ],
    "statementHtml" : [ "Установить 1-й и 3-й биты содержимого регистра $a0 в 1, если результат равен значению из $a1, записать в $v0 1, иначе записать 0" ],
    "name" : "Установка битов и проверка на равенство",
    "id" : "12"
  } ],
  "path" : [ "aos-w10", "lr", "2" ],
  "createStamp" : {
    "time" : 1285174425940,
    "node" : "anton"
  },
  "name" : "Лабораторная №2 - Условные операторы",
  "id" : "2"
}
